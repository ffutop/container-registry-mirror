#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] -f [filename] 

Script description here.

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info
-f, --file      Point out specific proposal  
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    -f | --file) 
      file=${2-}
      shift
      ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  [[ -z "${file-}" ]] && die "Missing required parameter: file"

  return 0
}

parse_params "$@"
setup_colors

# script logic here

imageFrom=$(cat ${file} | tools/jq -r .image.from)
imageTo=$(cat ${file} | tools/jq -r .image.to)
imageTag=$(cat ${file} | tools/jq -r .image.tag)

tools/ffdit -f "${imageFrom}:${imageTag}" -t "${imageTo}:${imageTag}" 

if [[ $? -eq 0 ]]
then
    echo "FFDIT: Execute Success!" >> comments
    echo "Docker Pull Command: docker pull ${imageTo}:${imageTag}" >> comments
else
    echo "FFIDT: Execute Failed!" >> comments
    echo "Please follow issue template and check your issue"
fi
